@page
@model WebApp.Pages.Samples.BasicDataManagementModel
@{
    ViewData["Title"] = "Basic Data Management";
}

<h1>Basic Data Management </h1>
<blockquote> This page will explore the most common controls you will probably use on a form.There will be 
    multiple buttons (events) to code in the Pagemodel (a.k.a Code-Behind).The control will be a mix of 
    label,input,select,textarea and buttons
</blockquote>

@*
    Controls:label,input,select,textarea and buttons
    <label> does not need arguments
            can have helper tags: asp-for, asp-attributes, asp-validation-for
            depending on css stylesheets, you can get different looks

    <input> this is your major control to use for data input
             it can be set to various types of input data using the attribute type="xxxx"
             can tie the control to a property on the PageModel using asp-for="xxxx"
             where xxx is the name of the property on the PageModel

    <textarea> use to accept form input for large amounts of text (ie comments)
                can tie the control to a property on the PageModel using asp-for="xxxx"
                where xxx is the name of the property on the PageModel
                can set the rows and cols attributes to control the size of the textarea

    <select> use to accept form input for a list of items
            and  other names: combobox, dropdownlist, selectionlist  

    <option> this control can have an optional "prompt line" which
             would be the first line in the list. 
            select requires a paired element tag set
            the option tag can have a value attribute which is the value
             that will be returned to the PageModel
          option requires a paired element tag set
          each line in the list is a separate option tag
          this control can be coded with "hard-coded" value OR
             logically load from a collection of data
          syntax of option tag is : 
             <option value="xxxx">yyyy</option>
                where xxxx is the value to be returned to the PageModel
                           this attribute can be omitted if you are not using
                            the value attribute then the return value will be
                            the text displayed in the list
*@
@*
    the following is a setup that allows the display of recorded errors
    saved within your PageMoel when you use ModelState. The method used 
    to save each error is .AddModelError(xxxx).
    it will automatically format tour erorrs in a nice list using asp-validation-summary

    an alternative is for you to do your own coding
    in this case you will need 
    a) a property in your PageModel(List<string> ErrorList)
    b) you would have to code your own loop containing an unordered list. Each <li>
        would represent an error line.


   
*@

<div asp-validation-summary="All" >
    @if (ModelState.ErrorCount>0)
    {
        <p>Please review the (validation summary) following concern to correct your submission:</p>
    }

   
</div>
@if (Model.ErrorList.Count() > 0)
{
    <p> Please review the (manual display) following concern to correct your submission:</p>
    <ul>
        @foreach (var error in Model.ErrorList)
        {
            <li>
                @error
            </li>
        }
    </ul>
}
<form method="post">
    <label>
        Enter a number (standard text box control):
        <input type="number" asp-for="Num" step="0.01"/>
    </label>
    <label>
        TextArea for large amounts of text (ie comments):
        <textarea asp-for="MassText" rows="5" cols="60" ></textarea>

        <label>
        <label>
        Select a favorite course from the dropdown list (select control):
        <select asp-for="FavouriteCourse">
            <option value="0">on screen prompt line ....</option>
            <option value="1008">Digital Media Tools</option>
            <option value="1012">Programming Fundamentals</option>
            <option value="1017">Web Design Fundamentals</option>
            <option value="1517">Introduction to Web Applications</option>
        </select>
    </label>

            <label>
                Using a select without a value on the option tag:
            </label>
            <select asp-for="FavouriteCourseNoValueOnOption" class="bigbox">
                <option>on screen prompt line ....</option>
                <option>Digital Media Tools</option>
                <option>Programming Fundamentals</option>
                <option>Web Design Fundamentals</option>
                <option>Introduction to Web Applications</option>
            </select>
            <br /><br />
            <button type="submit" asp-page-handler="ControlProcessing">Submit Form Data</button>
            &nbsp; &nbsp;
            <button type="submit" asp-page-handler="RedirectPage">Go to Basic Events</button>
 </form>
 <br /><br />
 Processing Results: @Model.FeedBack